// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/mfa/v1/mfa.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MFACode struct {
	// primary key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the account to which this code belongs
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// a randomly generated code
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// when the code was generated
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// when the code will expire
	ExpiresAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// indicates whether a code has been used. Once used, a code becomes stale.
	Used bool `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`
	// if true, this code cannot be used. When a user uses a code,
	// all previously issued codes are rendered stale.
	Stale                bool     `protobuf:"varint,7,opt,name=stale,proto3" json:"stale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MFACode) Reset()         { *m = MFACode{} }
func (m *MFACode) String() string { return proto.CompactTextString(m) }
func (*MFACode) ProtoMessage()    {}
func (*MFACode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b353bf22c49975c, []int{0}
}

func (m *MFACode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MFACode.Unmarshal(m, b)
}
func (m *MFACode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MFACode.Marshal(b, m, deterministic)
}
func (m *MFACode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MFACode.Merge(m, src)
}
func (m *MFACode) XXX_Size() int {
	return xxx_messageInfo_MFACode.Size(m)
}
func (m *MFACode) XXX_DiscardUnknown() {
	xxx_messageInfo_MFACode.DiscardUnknown(m)
}

var xxx_messageInfo_MFACode proto.InternalMessageInfo

func (m *MFACode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MFACode) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *MFACode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MFACode) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MFACode) GetExpiresAt() *timestamp.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *MFACode) GetUsed() bool {
	if m != nil {
		return m.Used
	}
	return false
}

func (m *MFACode) GetStale() bool {
	if m != nil {
		return m.Stale
	}
	return false
}

func init() {
	proto.RegisterType((*MFACode)(nil), "alpacalabs.mfa.v1.MFACode")
}

func init() { proto.RegisterFile("alpacalabs/mfa/v1/mfa.proto", fileDescriptor_4b353bf22c49975c) }

var fileDescriptor_4b353bf22c49975c = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x49, 0xf7, 0x3f, 0x82, 0xb0, 0xa0, 0x50, 0x26, 0xe2, 0xf0, 0x6a, 0x37, 0x4b, 0xa9,
	0xde, 0xe8, 0x65, 0x27, 0x08, 0xc2, 0x0a, 0x63, 0xc8, 0x2e, 0x64, 0x30, 0x4e, 0x93, 0xb4, 0x06,
	0x1a, 0x53, 0xda, 0x74, 0xf8, 0x0e, 0xbe, 0x85, 0x97, 0x3e, 0x8a, 0xcf, 0xe2, 0x43, 0x48, 0xb2,
	0x8e, 0x09, 0xbb, 0xf0, 0x2a, 0x27, 0xdf, 0xf9, 0xbe, 0xe4, 0xc7, 0x39, 0xf8, 0x02, 0xf2, 0x02,
	0x18, 0xe4, 0x90, 0x54, 0x81, 0x4a, 0x21, 0xd8, 0x86, 0xf6, 0xa0, 0x45, 0xa9, 0x8d, 0x26, 0xc3,
	0x43, 0x93, 0x5a, 0x75, 0x1b, 0x8e, 0xae, 0x32, 0xad, 0xb3, 0x5c, 0x04, 0xce, 0x90, 0xd4, 0x69,
	0x60, 0xa4, 0x12, 0x95, 0x01, 0x55, 0xec, 0x32, 0xd7, 0x3f, 0x08, 0xf7, 0xe2, 0xc7, 0xe8, 0x41,
	0x73, 0x41, 0x4e, 0xb1, 0x27, 0xb9, 0x8f, 0xc6, 0x68, 0x32, 0x58, 0x7a, 0x92, 0x93, 0x4b, 0x8c,
	0x81, 0x31, 0x5d, 0xbf, 0x99, 0x8d, 0xe4, 0xbe, 0xe7, 0xf4, 0x41, 0xa3, 0x3c, 0x71, 0x42, 0x70,
	0x9b, 0x69, 0x2e, 0xfc, 0x96, 0x6b, 0xb8, 0x9a, 0xdc, 0x63, 0xcc, 0x4a, 0x01, 0x46, 0xf0, 0x0d,
	0x18, 0xbf, 0x3d, 0x46, 0x93, 0x93, 0x9b, 0x11, 0xdd, 0x41, 0xd0, 0x3d, 0x04, 0x7d, 0xde, 0x43,
	0x2c, 0x07, 0x8d, 0x3b, 0x32, 0x36, 0x2a, 0xde, 0x0b, 0x59, 0x8a, 0xca, 0x46, 0x3b, 0xff, 0x47,
	0x1b, 0x77, 0x64, 0x2c, 0x49, 0x5d, 0x09, 0xee, 0x77, 0xc7, 0x68, 0xd2, 0x5f, 0xba, 0x9a, 0x9c,
	0xe1, 0x4e, 0x65, 0x20, 0x17, 0x7e, 0xcf, 0x89, 0xbb, 0xcb, 0xec, 0x03, 0xe1, 0x73, 0xa6, 0x15,
	0x3d, 0x9a, 0xd4, 0xac, 0x1f, 0xa7, 0xb0, 0xb0, 0xbf, 0x2c, 0xd0, 0xcb, 0x5d, 0x26, 0xcd, 0x6b,
	0x9d, 0x50, 0xa6, 0x55, 0x10, 0x39, 0xe7, 0xdc, 0x0e, 0xdc, 0x41, 0x94, 0xa2, 0xd0, 0x53, 0x95,
	0xc2, 0x34, 0xd3, 0xc1, 0xd1, 0x32, 0x3e, 0xbd, 0x56, 0x34, 0x8f, 0xbf, 0xbc, 0xe1, 0x21, 0x45,
	0xe3, 0x14, 0xe8, 0x2a, 0xfc, 0xfe, 0xab, 0xad, 0xe3, 0x14, 0xd6, 0xab, 0x30, 0xe9, 0xba, 0x17,
	0x6f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xc6, 0x5e, 0x93, 0xd6, 0x01, 0x00, 0x00,
}
