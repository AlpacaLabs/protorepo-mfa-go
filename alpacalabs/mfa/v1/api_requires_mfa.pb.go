// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/mfa/v1/api_requires_mfa.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequiresMfaRequest struct {
	AccountId            string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequiresMfaRequest) Reset()         { *m = RequiresMfaRequest{} }
func (m *RequiresMfaRequest) String() string { return proto.CompactTextString(m) }
func (*RequiresMfaRequest) ProtoMessage()    {}
func (*RequiresMfaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b6cfbd3d73062, []int{0}
}

func (m *RequiresMfaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequiresMfaRequest.Unmarshal(m, b)
}
func (m *RequiresMfaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequiresMfaRequest.Marshal(b, m, deterministic)
}
func (m *RequiresMfaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiresMfaRequest.Merge(m, src)
}
func (m *RequiresMfaRequest) XXX_Size() int {
	return xxx_messageInfo_RequiresMfaRequest.Size(m)
}
func (m *RequiresMfaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiresMfaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequiresMfaRequest proto.InternalMessageInfo

func (m *RequiresMfaRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type RequiresMfaResponse struct {
	// whether the specified account requires multi-factor auth to login
	RequiresMfa          bool     `protobuf:"varint,1,opt,name=requires_mfa,json=requiresMfa,proto3" json:"requires_mfa,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequiresMfaResponse) Reset()         { *m = RequiresMfaResponse{} }
func (m *RequiresMfaResponse) String() string { return proto.CompactTextString(m) }
func (*RequiresMfaResponse) ProtoMessage()    {}
func (*RequiresMfaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b6cfbd3d73062, []int{1}
}

func (m *RequiresMfaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequiresMfaResponse.Unmarshal(m, b)
}
func (m *RequiresMfaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequiresMfaResponse.Marshal(b, m, deterministic)
}
func (m *RequiresMfaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiresMfaResponse.Merge(m, src)
}
func (m *RequiresMfaResponse) XXX_Size() int {
	return xxx_messageInfo_RequiresMfaResponse.Size(m)
}
func (m *RequiresMfaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiresMfaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequiresMfaResponse proto.InternalMessageInfo

func (m *RequiresMfaResponse) GetRequiresMfa() bool {
	if m != nil {
		return m.RequiresMfa
	}
	return false
}

func init() {
	proto.RegisterType((*RequiresMfaRequest)(nil), "alpacalabs.mfa.v1.RequiresMfaRequest")
	proto.RegisterType((*RequiresMfaResponse)(nil), "alpacalabs.mfa.v1.RequiresMfaResponse")
}

func init() {
	proto.RegisterFile("alpacalabs/mfa/v1/api_requires_mfa.proto", fileDescriptor_2e3b6cfbd3d73062)
}

var fileDescriptor_2e3b6cfbd3d73062 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xcc, 0x29, 0x48,
	0x4c, 0x4e, 0xcc, 0x49, 0x4c, 0x2a, 0xd6, 0xcf, 0x4d, 0x4b, 0xd4, 0x2f, 0x33, 0xd4, 0x4f, 0x2c,
	0xc8, 0x8c, 0x2f, 0x4a, 0x2d, 0x2c, 0xcd, 0x2c, 0x4a, 0x2d, 0x8e, 0xcf, 0x4d, 0x4b, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x44, 0xa8, 0xd4, 0x03, 0x89, 0x96, 0x19, 0x2a, 0x19, 0x73,
	0x09, 0x05, 0x41, 0x15, 0xfa, 0xa6, 0x25, 0x82, 0x98, 0xa9, 0xc5, 0x25, 0x42, 0xb2, 0x5c, 0x5c,
	0x89, 0xc9, 0xc9, 0xf9, 0xa5, 0x79, 0x25, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x9c, 0x50, 0x11, 0xcf, 0x14, 0x25, 0x0b, 0x2e, 0x61, 0x14, 0x4d, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0x42, 0x8a, 0x5c, 0x3c, 0xc8, 0x96, 0x82, 0xf5, 0x71, 0x04, 0x71, 0x17, 0x21, 0x94,
	0x3a, 0x75, 0x33, 0x72, 0x89, 0x26, 0xe7, 0xe7, 0xea, 0x61, 0x38, 0xc4, 0x89, 0xc3, 0x37, 0x2d,
	0x31, 0x00, 0xe4, 0xca, 0x00, 0xc6, 0x28, 0x8b, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4,
	0xfc, 0x5c, 0x7d, 0x47, 0xb0, 0x4a, 0x1f, 0x90, 0xe7, 0xc0, 0x9e, 0x28, 0x4a, 0x2d, 0xc8, 0xd7,
	0xcd, 0x4d, 0x4b, 0xd4, 0x4d, 0xcf, 0xd7, 0xc7, 0xf0, 0xf8, 0x22, 0x26, 0x66, 0x47, 0x1f, 0xdf,
	0x55, 0x4c, 0x82, 0x08, 0x5d, 0x7a, 0xbe, 0x69, 0x89, 0x7a, 0x61, 0x86, 0xa7, 0x90, 0xc5, 0x62,
	0x7c, 0xd3, 0x12, 0x63, 0xc2, 0x0c, 0x93, 0xd8, 0xc0, 0x26, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x86, 0xed, 0x32, 0xc0, 0x42, 0x01, 0x00, 0x00,
}
